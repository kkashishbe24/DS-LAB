#include <iostream>
using namespace std;

struct Element {
    int row, col, val;
};

// Function to transpose a sparse matrix
void transpose(Element a[], Element b[]) {
    b[0].row = a[0].col;
    b[0].col = a[0].row;
    b[0].val = a[0].val;

    int k = 1;
    for (int i = 0; i < a[0].col; i++) {
        for (int j = 1; j <= a[0].val; j++) {
            if (a[j].col == i) {
                b[k].row = a[j].col;
                b[k].col = a[j].row;
                b[k].val = a[j].val;
                k++;
            }
        }
    }
}

// Multiply two sparse matrices
void multiplySparse(Element a[], Element b[], Element c[]) {
    if (a[0].col != b[0].row) {
        cout << "Matrix dimensions do not match for multiplication!" << endl;
        return;
    }

    Element bT[b[0].val + 1];
    transpose(b, bT);

    c[0].row = a[0].row;
    c[0].col = b[0].col;
    int k = 1;

    for (int i = 0; i < a[0].row; i++) {
        for (int j = 0; j < bT[0].row; j++) {
            int sum = 0;
            for (int p = 1; p <= a[0].val; p++) {
                if (a[p].row == i) {
                    for (int q = 1; q <= bT[0].val; q++) {
                        if (bT[q].row == j && bT[q].col == a[p].col) {
                            sum += a[p].val * bT[q].val;
                        }
                    }
                }
            }
            if (sum != 0) {
                c[k].row = i;
                c[k].col = j;
                c[k].val = sum;
                k++;
            }
        }
    }
    c[0].val = k - 1;
}

// Function to print triplet matrix
void printTriplet(Element a[]) {
    for (int i = 0; i <= a[0].val; i++) {
        cout << a[i].row << " " << a[i].col << " " << a[i].val << endl;
    }
}

int main() {
    int m, n, t1, t2, p, q;
    cout << "Enter rows and cols of first matrix: ";
    cin >> m >> n;
    cout << "Enter number of non-zero elements in first matrix: ";
    cin >> t1;
    Element a[t1 + 1];
    a[0] = {m, n, t1};
    cout << "Enter row col val for first matrix:\n";
    for (int i = 1; i <= t1; i++) cin >> a[i].row >> a[i].col >> a[i].val;

    cout << "Enter rows and cols of second matrix: ";
    cin >> p >> q;
    cout << "Enter number of non-zero elements in second matrix: ";
    cin >> t2;
    Element b[t2 + 1];
    b[0] = {p, q, t2};
    cout << "Enter row col val for second matrix:\n";
    for (int i = 1; i <= t2; i++) cin >> b[i].row >> b[i].col >> b[i].val;

    Element c[t1 * t2 + 1];
    multiplySparse(a, b, c);

    cout << "\nFirst Matrix Triplet:\n";
    printTriplet(a);

    cout << "\nSecond Matrix Triplet:\n";
    printTriplet(b);

    cout << "\nResultant Matrix Triplet (Multiplication):\n";
    printTriplet(c);

    return 0;
}
