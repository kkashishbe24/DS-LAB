#include <iostream>
using namespace std;

struct Element {
    int row;
    int col;
    int val;
};

void transpose(Element a[], Element b[]) {
    int m = a[0].row; // rows in original
    int n = a[0].col; // cols in original
    int t = a[0].val; // total non-zero elements

    b[0].row = n;   // transpose will have swapped dimensions
    b[0].col = m;
    b[0].val = t;

    int k = 1; // index for b[]
    for (int col = 0; col < n; col++) {
        for (int i = 1; i <= t; i++) {
            if (a[i].col == col) {
                b[k].row = a[i].col;
                b[k].col = a[i].row;
                b[k].val = a[i].val;
                k++;
            }
        }
    }
}

void printTriplet(Element a[]) {
    for (int i = 0; i <= a[0].val; i++) {
        cout << a[i].row << " " << a[i].col << " " << a[i].val << endl;
    }
}

int main() {
    int m, n, t;
    cout << "Enter rows and columns of matrix: ";
    cin >> m >> n;

    cout << "Enter number of non-zero elements: ";
    cin >> t;

    Element a[t + 1], b[t + 1];

    a[0].row = m;
    a[0].col = n;
    a[0].val = t;

    cout << "Enter row, col, value for each non-zero element:\n";
    for (int i = 1; i <= t; i++) {
        cin >> a[i].row >> a[i].col >> a[i].val;
    }

    cout << "\nOriginal Triplet:\n";
    printTriplet(a);

    transpose(a, b);

    cout << "\nTransposed Triplet:\n";
    printTriplet(b);

    return 0;
}
