#include <iostream>
using namespace std;

struct Element {
    int row;
    int col;
    int val;
};

void addSparse(Element a[], Element b[], Element c[]) {
    if (a[0].row != b[0].row || a[0].col != b[0].col) {
        cout << "Matrices dimensions do not match!" << endl;
        return;
    }

    c[0].row = a[0].row;
    c[0].col = a[0].col;

    int i = 1, j = 1, k = 1;
    while (i <= a[0].val && j <= b[0].val) {
        if (a[i].row < b[j].row || 
           (a[i].row == b[j].row && a[i].col < b[j].col)) {
            c[k++] = a[i++];
        } 
        else if (b[j].row < a[i].row || 
                (b[j].row == a[i].row && b[j].col < a[i].col)) {
            c[k++] = b[j++];
        } 
        else {
            int sum = a[i].val + b[j].val;
            if (sum != 0) {
                c[k].row = a[i].row;
                c[k].col = a[i].col;
                c[k].val = sum;
                k++;
            }
            i++; j++;
        }
    }

    while (i <= a[0].val) c[k++] = a[i++];
    while (j <= b[0].val) c[k++] = b[j++];

    c[0].val = k - 1;
}

void printTriplet(Element a[]) {
    for (int i = 0; i <= a[0].val; i++) {
        cout << a[i].row << " " << a[i].col << " " << a[i].val << endl;
    }
}

int main() {
    int m, n, t1, t2;
    cout << "Enter rows and columns of matrices: ";
    cin >> m >> n;

    cout << "Enter number of non-zero elements in first matrix: ";
    cin >> t1;
    Element a[t1 + 1];
    a[0] = {m, n, t1};
    cout << "Enter row col val for first matrix:\n";
    for (int i = 1; i <= t1; i++) cin >> a[i].row >> a[i].col >> a[i].val;

    cout << "Enter number of non-zero elements in second matrix: ";
    cin >> t2;
    Element b[t2 + 1];
    b[0] = {m, n, t2};
    cout << "Enter row col val for second matrix:\n";
    for (int i = 1; i <= t2; i++) cin >> b[i].row >> b[i].col >> b[i].val;

    Element c[t1 + t2 + 1];
    addSparse(a, b, c);

    cout << "\nFirst Matrix Triplet:\n";
    printTriplet(a);

    cout << "\nSecond Matrix Triplet:\n";
    printTriplet(b);

    cout << "\nResultant Matrix Triplet (Addition):\n";
    printTriplet(c);

    return 0;
}
